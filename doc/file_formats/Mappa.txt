...  = Means the element above it is repeated a variable ammount of time.
       Or can also mean I have no clue how that struct is laid out.

==========================================================
mappa_*.bin
==========================================================
Thanks to Aissurteivos, Ogregunner, and etc for their research
https://github.com/Aissurteivos/mdrngzer/blob/master/doc/rom.md
http://www.gamefaqs.com/boards/938930-pokemon-mystery-dungeon-explorers-of-darkness/50597686
https://docs.google.com/document/d/1UfiFz4xAPtGd-1X2JNE0Jy2z-BLkze1PE4Fo9u-QeYo


The format of the mappa_*.bin files are all similar. They seems to handle each a certain amount of dungeons.
Each mappa_*.bin file seems to have a matching companion mappa_g*.bin file.

----------------------------------------------------------
Structure 
----------------------------------------------------------

Offset      Name                    Size            Type            Description
----------  ----                    ----            ----            -----------
SIR0Header                          16              -               The standard SIR0 header.
[
    0x00    magicn                  4               -               "SIR0"
    0x04    ptrsubhdr               4               uint32          Pointer to the subheader.
    0x08    ptrptrofftbl            4               uint32          Pointer to the encoded pointer offset table.
    0x0C    null                    4               -               4 bytes of zeros.
]
DungeonDataBlock            (ptrDungeonLUT - 16)                    Contains the dungeon's list of floor entries.
[
    DungeonEntry                    varies                          Contains references/indices to each data entries providing info for this dungeon floor.
    [
        NullFloorEntry              18              -               18 bytes of 0! Seems to be used to tell where the previous entry ends.
        FloorEntry                  18              -               Contains data for a single floor.
        [
        0x00 idfloordata             2               uint16          Floor terrain data index.
        0x02 idpkspwn                2               uint16          Index of pokemon spawn data for this floor.
        0x04 idtrapspwn              2               uint16          Index of the trap spawn probability list for this floor.
        0x06 iditemspwn              2               uint16          Item spawn data index for this floor.
        0x08 idshopdat               2               uint16          Shop item index.
        0x0A idmhouseitem            2               uint16          Monster house item index.
        0x0C idburieditemsdat        2               uint16          Index to buried item data?
        0x0E unk2                    2               uint16          unknown, most likely an index to an item list
        0x10 unk3                    2               uint16          unknown, most likely an index to an item list
        ]
        ...
    ]
    ...
]
DungeonLUT      (ptrFloorDataBlock - ptrDungeonLUT)                 A look up table for the dungeon whose data this file contains.
[
    ptrdungeon                      4               uint32          A pointer to a dungeon's data entry within DungeonDataBlock.
    ...
]
FloorDataBlock
[
    FloorDataEntry                  32                              A single entry for a single floor of a dungeon.
    [
    0x00 floorshape                  1               uint8           A value from 0x0 to 0xF that indicates the overall shape of the floor. See below.
    0x01 roomdensity                 1               uint8           (Previously unk4) Room density. 2 is added to this value
    0x02 tilesetid                   1               uint8           Tileset used for the floor.
    0x03 musicid                     1               uint8           The id of the music played on the floor.
    0x04 defaultweather              1               uint8           The weather forced upon entering the floor. (0: Clear, 1: Sunny, 2: Sandstorm, 3: Cloudy, 4: Rainy, 5: Hail , 6: Fog, 7: Snow, 8: Random)
    0x05 minconnections              1               uint8           (Previously unk5) The minimum amount of connections to generate on the floor between cells.
    0x06 pkmndensity                 1               uint8           Apparently the initial pokemon density.
    0x07 shopratio                   1               uint8           Chances of shop spawning.
    0x08 mhouseratio                 1               uint8           Chances of monster houses spawning.
    0x09 unk6                        1               uint8           Apparently a chance ratio to trigger something on floor gen. 
    0x0A stickychance                1               uint8           (Previously unk7) chance of sticky items to spawn
    0x0B deadendsallowed             1               uint8           (Previously unk8) If 1, dead end cells are allowed on the floor. 0 otherwise.
    0x0C hazardtiles                 1               uint8           (Previously unk9) What type of water/void/lava/none tiles are on the floor? And whether there's any.
    0x0D terrainbits                 1               uint8           (Previously unk10) TerrainBitfield (see below)
    0x0E unk11                       1               uint8           
    0x0F itemdensity                 1               uint8           Item density?
    0x10 trapdensity                 1               uint8           Trap density? Randomized between trapdensity and (trapdensity/2) ?
    0x11 floornb                     1               uint8           floor number.
    0x12 fixedfloorid                1               uint8           (Previously unk12)Fixed floor data id to use for this floor. Includes boss floors, key chambers, fixed final rooms.
    0x13 extrahallwdensity           1               uint8           (Previously unk13)Extra hallways density. Apparently density of hallways that serpents around and lead to nowhere in particular.
    0x14 burieditemdensity           1               uint8           Buried item density.
    0x15 waterdensity                1               uint8           Water density.
    0x16 darklvl                     1               uint8           Darkness level. (0: No darkness, 1: Heavy darkness, 2: Light darkness)
    0x17 maxcoin                     1               uint8           Maximum of amount of coins divided by 5
    0x18 keclitempos                 1               uint8           (Previously unk14) Keckleon show item position?
    0x19 emptymhchance               1               uint8           (Previously unk15) Chance of an empty monsterhouse spawning
    0x1A unk16                       1               uint8           (unk16) Affects content of hidden stairs?
    0x1B hiddenstrschnc              1               uint8           (Previously unk17) Hidden stairs spawn chance.
    0x1C enemyiq                     2               uint16         (Not sure what they mean here..)
    0x1E allowiqboostr               1               uint8          (Previously unk18) If the iq booster increases iq on this floor??
    0x1F unk19                       1               uint8           Always 0??
    ]
    ...
]
PkmnSpwnLsts
[
    PkmnSpawnList
    [
        PkmnSpawnEntry              8                -               A single entry that defines a spawnable pokemon. Might also be used to pre-cache pokemon sprites.
        [
        0x00 lvlmult                2                uint16          This is shifted right 7 bits and multiplied by 2 to set the level of the pokemon spawned. (lvl * 512) ??
        0x02 spwnrte                2                uint16          Has something to do with spawn probabilities.
        0x04 spwnrte2               2                uint16          Has something to do with spawn probabilities.
        0x06 pkmnid                 2                uint16          The pokemon/entity id of the pokemon to spawn.
        ]
        ...
        PkmnSpawnEntryEnd           8                -               8 bytes of 0 to mark the end of the list.
        [
        0x00 nullbytes              8                -               zeroes.
        ]
    ]
    ...
]
PkmnSpwnLUT                         vary            -                A table of pointers pointing within PkmnSpwnLsts. Each represent a spawn list.
[
    ptrpkspwnlst                    4               uint32           Pointer to a PkmnSpawnList.
    ...
]
TrapSpawnLsts
[
    FloorTrapProbs                  50                                 Probability for all traps to spawn on this floor. Game has 25 trap types, so always 50 bytes long!
    [
       trapprob                     2               uint16             Probability for a single trap type to spawn on the floor. Order matches the traps from the game
	   ..
    ]
    ...
]
TrapSpawnLstsLUT                    vary            -               Contains pointers pointing within TrapSpawnLsts.
[
    ptrunk                          4               uint32          Pointer to list of the probability of each of the 25 traps in the game to spawn
    ...
]
ItemSpawnLists
[
    ItemSpawnList
    [
		cmdhword					2				uint16 			A hword containing either a probability for the current itemid or a number of item ids to increment the current item id to. *More details below!
        ...
    ]
    ...
]
ItemSpawnListLUT
[
    ptritemspawnlist                4               uint32          A pointer to a spawn list within ItemSpawnLists.
    ...
]
Padding                            0-15             -               0xAA padding bytes to align the next part on 16 bytes.
SubHeader                           20 
[
    0x00    ptrDungeonLUT           4               uint32          Pointer to DungeonLUT.
    0x04    ptrFloorDataBlock       4               uint32          Pointer to FloorDataBlock / end of DungeonLUT.
    0x08    ptrItemSpawnListLUT     4               uint32          Pointer to ItemSpawnListLUT.
    0x0C    ptrPkmnSpwnLUT          4               uint32          Pointer to PkmnSpwnLUT.
    0x10    TrapSpawnLstsLUT        4               uint32          Pointer to TrapSpawnLstsLUT.
]
Padding                            0-15             -               0xAA padding bytes to align the next part on 16 bytes.
SIR0EncodedPtrList                  vary            -               The standard SIR0 encoded ptr list.
[]
Padding                            0-15             -               0xAA padding bytes to align the next part on 16 bytes.

==========================================================
Notes
==========================================================

----------------
Item Spawn List
----------------
Item spawn lists are encoded as a serie of 16 bits numbers which tells what item/category to modify the spawn chance of, OR the probability for a given item.
When decoding the value we need to keep track of the current itemid we're processing, since some of the values of the cmdhword allow us to increment the current item id my more than one. 

Here are the possible cases for the cmd hword:
	* cmdhword == 0xFFFF : Sets the current item spawn chance to 0xFFFF which means the game will spawn at least one of those on the floor! 
	* (cmdhword & 0x7500) == 0x7500 : In this case we wanna subtract 0x7530 from the value, and increment the current item id by the result!
	* any other values: Those are handled as a percentage chance of spawn according to ogregunner. Its a 2 digit precision fixed point number that's multiplied by 100 to be stored in an integer. So for example 40,01% would be 4001.



----------------
TerrainBitfield
----------------

Bits			Description
---------		-----------
0000 0001		Whether water/lava/void tiles are used on the floor??
0000 0010		?
0000 0100		If non-square rooms can be generated

==========================================================
Annex
==========================================================

From:
http://www.gamefaqs.com/boards/955859-pokemon-mystery-dungeon-explorers-of-sky/51698562?page=29
Ok guys, I have identified most of the Bytes in the Mappa_s.bin General Floor Information section that I had not previously identified. Here are the ones I have identified:

Byte 1: Floor Layout. This Byte determines the where rooms where be positioned on the floor. Also determines whether a floor will be Crossroads or Outer Square. I am working on recording all possible Floor Layouts from this Byte. I know the following floor configurations:
---01 = Small Floor with rooms positioned in a 2 x 3 layout. 6 Rooms Maximum.
---03 = Outer Square layout
---04 = Crossroads layout
---08 = Small floor with rooms positioned in a 3 x 2 layout. 6 Rooms Maximum.
---0B = Small floor with rooms positioned in a 3 x 3 layout. 9 Rooms Maximum.
The Room Density (Byte 2) apparently affects whether the Maximum will be met or not. If not, the layout could change to a lower room positioning layout, such as 0B giving a 2 x 2 layout if the Room Density is low enough.

Byte 2: Room Density. This Byte determines how many Rooms will be on the floor. The higher the Density, the more Rooms that can appear. The # of Rooms on the floor is affected by both this Byte and the Floor Layout Byte (Byte 1).
Byte 3: Terrain Appearance. This Byte determines the graphical appearance of the walls, floor tiles, and water/lava/air/void tiles.
Byte 4: Music. This Byte determines which Dungeon Music will be playing on that floor.
Byte 6: Hallway Length. This Byte affects the length of hallways. The Higher this number, the longer most hallways will be.
Byte 20: Hallway Density. This Byte determines how many extra room-connecting hallways and dead-end hallways will be on the floor. The Higher this number, the more hallways to traverse.
Byte 22: Water Density. This Byte determine how much of the floor will be covered in water tiles. Also applies to Lava, Air, & Void.

Here are the Bytes I have yet to figure out:
Byte 10: Every entry is 0 or 1. Unsure what this is for.
Byte 12: Every entry is 0 or 1. Unsure what this is for.
Byte 15: Every entry is 0 or 1. Unsure what this is for.
Byte 25: Every entry is the same number for any specific Dungeon. For example, Beach Cave's Floors all have Byte 25 equaling 2, and Treeshroud's Floors all have Byte 25 equaling 13. The Byte's value is always between 2 and 13. I am unsure what this is for. This is NOT related to Secret Power or Nature Power. Probably does not relate to Camouflage. This may relate to Generic Dungeon Music (randomly plays instead of the Main Dungeon Music on some floors), but I have not yet proven this.
Byte 26: Every entry is 0 except for a few random floors of Zero Isle Center and the 4 Rank Dungeons. No idea what this is for.

http://www.gamefaqs.com/boards/955859-pokemon-mystery-dungeon-explorers-of-sky/51698562?page=30
Ok, here are all the possible Floor Layouts based on Byte 1:
---00 = Medium-Large (Biggest: 6 x 4)
---01 = Small (Biggest: 2 x 3)
---02 = One-Room Monster House
---03 = Outer Square (Long hallway around edges of map with 8 rooms inside)
---04 = CrossRoads (3 rooms at top and bottom and 2 rooms at left and right side with a string of hallways in the middle of the map connecting the rooms)
---05 = Two-Room (One of them has a Monster House)
---06 = Line (1 horizontal straight line of 5 rooms)
---07 = Cross (5 Rooms in form of Cross; 3 x 3 with Top Left, Top Right, Bottom Left, and Bottom Right Room missing)
---08 = Small-Medium (Biggest: 4 x 2)
---09 = "Beetle" (1 Giant Room in middle of map with 3 vertical rooms to the left of it and to the right of it)
---0A = Outer Rooms (All Rooms at edge of map; Biggest: 6 x 4 with no rooms in the middle)
---0B = Small-Medium (Biggest: 3 x 3)
---0C = Medium-Large (Biggest: 6 x 4)
---0D = Medium-Large (Biggest: 6 x 4)
---0E = Medium-Large (Biggest: 6 x 4)
---0F = Medium-Large (Biggest: 6 x 4)




==========================================================
mappa_g*.bin
==========================================================
Seems to contain indices for each floors of each dungeons in the corresponding mappa_*.bin file, among other things.

----------------------------------------------------------
Structure 
----------------------------------------------------------

Offset      Name                    Size            Type            Description
----------  ----                    ----            ----            -----------
SIR0Header                          16              -               The standard SIR0 header.
[
    0x00    magicn                  4               -               "SIR0"
    0x04    ptrsubhdr               4               uint32          Pointer to the subheader.
    0x08    ptrptrofftbl            4               uint32          Pointer to the encoded pointer offset table.
    0x0C    null                    4               -               4 bytes of zeros.
]
DungeonDataIndices
[
    DungeonDatIndicesEntry			vary							List of floor indices (in FloorDataBlock) for this dungeon
    [
		nullfirstentry				4				uint32			Each table for a given dungeon starts with a null entry!
		FloorIndices				vary							List of indices for each floor's entry for this dungeon!
		[
			flooridx                4               uint32          Indice in the floor data list
			...
		]
    ]
    ...
]
DungeonLUT
[
    ptrdungeon                      4               uint32          Ptr to a dungeon's entry in DungeonDataIndices.
    ...
]
FloorDataBlock                                                      Shortened data for dungeon floors
[
	FloorEntry						4								Short entry with details on a floor.
	{
		tilesetid					1								Tileset used by the floor.
		fixedfloorid				1								Id of the fixed floor entry in fixed.bin?
		unk0						1								Unknown usually(0)
		unk1						1								Unknown usually(0)
	}
    ...
]
Padding                            0-15             -               0xAA padding bytes to align the next part on 16 bytes.
SubHeader							8
[
    0x00    ptrDungeonLUT           4               uint32          Pointer to DungeonLUT.
    0x04    ptrFloorDataBlock       4               uint32          Pointer to FloorDataBlock.
]
Padding                            0-15             -               0xAA padding bytes to align the next part on 16 bytes.
SIR0EncodedPtrList                  vary            -               The standard SIR0 encoded ptr list.
[]
Padding                            0-15             -               0xAA padding bytes to align the next part on 16 bytes.



//ASM stuff 
*thanks to End for the info! https://docs.google.com/document/d/1UfiFz4xAPtGd-1X2JNE0Jy2z-BLkze1PE4Fo9u-QeYo/edit

==========================
Dungeon Floor Data Table
==========================
Contains 720, 4 bytes entries in EoS.

Table in arm9.bin for Explorers of Sky
	*NA Offset: 0x09E3A0 to 0x09E670
	*EU Offset: 0x09E924 to 0x09EBF4

Function accessing the table(EoS NA):
	0204F5A0 359F1008 ldrcc   r1,=209E3A0h
	0204F5A4 23A00030 movcs   r0,30h
	0204F5A8 37D10100 ldrccb  r0,[r1,r0,lsl 2h]
	0204F5AC E12FFF1E bx      r14

Structure (EoS)
Offset				Length		Description
------				-------		----------------------------------
DungeonEntry		4			Entry containing details what makes up a givent dungeon.
[
0x00 nbfloors 		1 			Nb of floors making up the dungeon.
0x01 mappaid		1			Possibly indice in the mappa s file?
0x02 prevgrpfloors 	1 			The number of floors that all the previous dungeons in the current playthrough had together. 
									Ex: miracle sea 0, deep miracle sea 18, miracle seabed 22.
0x03 totalgrpfloors 1 			The total number of floors in the entire group of dungeon in the current playthrough. 
									Ex: miracle sea 23, deep miracle sea 23, miracle seabed 23.
]

===========================
Dungeon Restrictions Table
===========================
Table in arm9.bin for Explorers of Sky
	*NA Offset: 
	*EU Offset: 0x0A11E8 to 0x0A1DE8

===========================
Dungeon Terrain Table
===========================

===========================
Dungeon World Map Table
===========================

